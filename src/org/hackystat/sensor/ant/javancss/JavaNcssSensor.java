package org.hackystat.sensor.ant.javancss;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.XMLGregorianCalendar;

import org.apache.tools.ant.BuildException;
import org.hackystat.sensor.ant.javancss.resource.jaxb.Javancss;
import org.hackystat.sensor.ant.task.HackystatSensorTask;
import org.hackystat.utilities.tstamp.Tstamp;

/**
 * Implements an Ant task that parses the XML files generated by JavaNCSS. The Ant Task sends the
 * FileMetric data to a Hackystat server.
 * 
 * @author Philip Johnson
 */
public class JavaNcssSensor extends HackystatSensorTask {

  /** The name of this tool. */
  private static String tool = "JavaNCSS";

  /** A string containing the path to the JavaNCSS XML report file. */
  private String javancssReportXmlFile;

  /** Initialize a new instance of a JavaNcssSensor. */
  public JavaNcssSensor() {
    super(tool);
  }

  /**
   * Initialize a new instance of a JavaNcssSensor for testing purposes.
   * 
   * @param host The SensorBase host URL.
   * @param email The SensorBase email to use.
   * @param password The SensorBase password to use.
   */
  public JavaNcssSensor(String host, String email, String password) {
    super(host, email, password, tool);
  }

  /**
   * Sets the file path to the JavaNCSS report xml file.
   * 
   * @param filePath The JavaNCSS report file path.
   */
  public void setJavaNcssReportXmlFile(String filePath) {
    this.javancssReportXmlFile = filePath;
  }

  /**
   * Parses the JavaNCSS XML file and sends the resulting FileMetric data to the SensorBase server.
   * 
   * @throws BuildException If there is an error.
   */
  @Override
  public void execute() throws BuildException {
    this.setupSensorShell();
    int numberOfEntries = 0;
    Date startTime = new Date();
    verboseInfo("Processing JavaNCSS report file: " + this.javancssReportXmlFile);
    try {
      numberOfEntries += this.processJavaNcssXmlFile(this.javancssReportXmlFile);
    }
    catch (Exception e) {
      String msg = errMsgPrefix + "Failure processing JavaNCSS xml file: " + e.getMessage();
      info(msg);
      throw new BuildException(msg, e);
    }
    if (this.send() > 0) {
      Date endTime = new Date();
      long elapsedTime = (endTime.getTime() - startTime.getTime()) / 1000;
      info(numberOfEntries + " FileMetric entries sent to " + this.sensorProps.getSensorBaseHost()
          + " (" + elapsedTime + " secs.)");
    }
    else {
      info("Failed to send JavaNCSS data. See ~/.hackystat/sensorshell/logs for details.");
    }
  }

  /**
   * Processes the JavaNCSS XML data file, generating sensor data.
   * 
   * @param fileNameString The file name.
   * @return The number of FileMetrics instances generated.
   * @throws BuildException If problems occur.
   */
  private int processJavaNcssXmlFile(String fileNameString) throws BuildException {
    // The start time for all entries will be approximated by the XML file's last mod time.
    // Use the TstampSet to make it unique.
    java.io.File xmlFile = new java.io.File(fileNameString);
    long startTime = xmlFile.lastModified();
    int count = 0;
    try {
      JAXBContext context = JAXBContext
          .newInstance(org.hackystat.sensor.ant.javancss.resource.jaxb.ObjectFactory.class);
      Unmarshaller unmarshaller = context.createUnmarshaller();

      // JavaNCSS report.
      Javancss javancss = (Javancss) unmarshaller.unmarshal(xmlFile);
      // Construct the mapping from Java file paths to their CCN data.
      CcnData ccnData = new CcnData(this.getFiles(), javancss.getFunctions());

      for (File resource : ccnData.getFiles()) {
        long tstamp = this.tstampSet.getUniqueTstamp(startTime);
        XMLGregorianCalendar tstampXml = Tstamp.makeTimestamp(tstamp);
        XMLGregorianCalendar runtimeXml = Tstamp.makeTimestamp(this.runtime);
        // Create the sensor data instance key/value map.
        Map<String, String> keyValMap = new HashMap<String, String>();
        // Required
        keyValMap.put("Tool", "JavaNCSS");
        keyValMap.put("SensorDataType", "FileMetric");
        keyValMap.put("Runtime", runtimeXml.toString());
        keyValMap.put("Timestamp", tstampXml.toString());
        keyValMap.put("Resource", resource.getAbsolutePath());
        // Expected
        keyValMap.put("TotalLines", String.valueOf(ccnData.getTotalLines(resource)));
        // Optional, but of course the whole point of this sensor.
        keyValMap.put("CyclomaticComplexityList", ccnData.getCcnData(resource));
        // add data to sensorshell
        this.sensorShell.add(keyValMap);
        count++;
      }
      return count;
    }
    catch (Exception e) {
      throw new BuildException(errMsgPrefix + "Failure: " + e.getMessage(), e);
    }
  }
}
